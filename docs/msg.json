enum{
    REQ_FETCH_PLAYER_INFO,
    REQ_REGIST,
    REQ_LOGIN,
    REQ_LOGOUT,
    REQ_FETCH_LOBBY_INFO,
    REQ_FETCH_ROOM_INFO,
    REQ_SITDOWN,
    REQ_LEAVE,
    REQ_READGO,
    REQ_GIVEUP,
    REQ_PLACECHESS,
    REQ_GAMEOVER_WINNER,
    REQ_GAMEOVER_LOSER,
    REQ_SEND_MSG
};

enum{
    RES_FETCH_PLAYER_INFO_SUCCESS,
    RES_FETCH_LOBBY_INFO_FAILED,
    RES_REGIST_SUCCESS,
    RES_REGIST_FAILED,
    RES_LOGIN_SUCCESS,
    RES_LOGIN_FAILED,
    RES_LOGOUT_SUCCESS,
    RES_LOGOUT_FAILED,
    RES_FETCH_LOBBY_INFO_SUCCESS,
    RES_FETCH_LOBBY_INFO_FAILED,
    RES_FETCH_ROOM_INFO_SUCCESS,
    RES_FETCH_ROOM_INFO_FAILED,
    BROADCAST_SITDOWN,
    RES_SITDOWN_FAILED,
    BROADCAST_LEAVE,
    RES_LEAVE_FAILED,
    SINGLECAST_READYGO,
    RES_READYGO_FAILED,
    RES_GIVEUP_SUCCESS,
    RES_GIVEUP_FAILED,
    RES_PLACECHESS_SUCCESS,
    RES_PLACECHESS_FAILED,
    SINGLECAST_PLACECHESS,
    RES_GAMEOVER,
    RES_GAMEOVER_FAILED,
    RES_SEND_MSG_SUCCESS,
    RES_SEND_MSG_FAILED,
};

#event after login.
"fetch player information request":
{
    "id":REQ_FETCH_PLAYER_INFO
}

"fetch player information request":
{
    {
        "id":RES_FETCH_PLAYER_INFO_SUCCESS,
        "username":"chars(<=16)",
        "title":"Go Buffs/chess player/master",
        "level":int(0-9),
        "integral":int(<=?),
        "winnig_probability":float(0.0%-100.0%)
    }
    or
    {
        "id":RES_FETCH_PLAYER_INFO_FAILED,
        "reason":"inner server error"
    }
}

#event of button "regist" in entrance window.
"regist request":
{
    "id":REQ_REGIST,
    "username":"?",
    "passwd":"chars(<=16)",
    "regist_time":"year-month-day hour:min:sec"
}

"regist response":
{
    {
        "id":RES_REGIST_SUCCESS
    }
    or
    {
        "id":RES_REGIST_FAILED,
        "reason:":"user already exists/inner server error"
    }
}

#event of button "login" in entrance window.
"login request":
{
    "id":REQ_LOGIN,
    "username":"?",
    "passwd":"?"
}

"login response":
{
    {
        "id":RES_LOGIN_SUCCESS
    }
    or
    {
        "id":RES_LOGIN_FAILED,
        "reason":"no such user/incorrect password/inner server error"
    }
}

#event of button "logout" in lobby.
"logout request":
{
    "id":REQ_LOGOUT,
    "username":"?"
}

"logout response":
{
    {
        "id":RES_LOGOUT_SUCCESS
    }
    or
    {
        "id":RES_LOGOUT_FAILED,
        "reason":"No such user/inner server error"
    }
}

#event after login.
"fetch lobby info request":
{
    "id":REQ_FETCH_LOBBY_INFO
}

"fetch lobby info response":
{
    {
        "id":RES_FETCH_LOBBY_INFO_SUCCESS,
        "online_players_num":int(0-?),
        "on_battle_players_num":int(0-),
        "max_room_id":?
    }
    or
    {
        "id":RES_FETCH_LOBBY_INFO_FAILED,
        "reason":"inner server error"
    }
}

#event of button "next/prev room" in lobby.
"fetch room info request":
{
    "id":REQ_FETCH_ROOM_INFO,
    "room_id":int(0-?)
}

"fetch room info response":
{
    {
        "id":RES_FETCH_ROOM_INFO_SUCCESS,
        "room_id":int(0-?),
        "players_sat_down_num":int(0-?),
        "players list":
        #presented as map.
        #fetch from server and store in client.
        #for the use of displaying information of the rival.
        #update the players list when someone leave the desk or sit down.
        [
            {
                "desk id":int(0-127),
                #desk_id:be placed left;desk_id|0x80:be placed right.
                "player_id":desk_id or desk_id|0x80,
                "username":"?",
                "title":"?",
                "level":?,
                "integral":?,
                "winning_probability":?
            },
            ...
        ]
    }
    or
    {
        "id":RES_FETCH_ROOM_INFO_FAILED,
        "reason":"inner server error"
    }
}

#event of button "sitdown" in lobby.
"sitdown request":
{
    "id":REQ_SITDOWN,
    "room_id":?,
    "desk_id":?,
    "username":"?"
}

"sitdown response":
{
    #inc the attribute of room "player_satdown_num".
    #broadcast in the same room.
    {
        "id":BROADCAST_SITDOWN,
        #player_id can be used to determined whether they are in the same desk.
        "player_id":?,
        "username":"?",
        "title":"?",
        "level":?,
        "integral":?,
        "winning_probability":?
    }
    or
    {
        "id":RES_SITDOWN_FAILED,
        "reason":"players number up to the limits/inner server error"
    }
}

#event of button "leave" in SmartGo Pro.
"leave request":
{   
    "id":REQ_LEAVE,
    "room_id":?,
    "desk_id":?,
    "player_id":?
}

"leave response":
{
    #broadcast
    {
        "id":BROADCAST_LEAVE,
        "player_id":?
    }
    or
    {
        "id":RES_LEAVE_FAILED,
        "reason":"inner server error"
    }
}

#event of button "readyGo" in SmartGo Pro.
"readyGo request":
{
    "id":REQ_READYGO,
    "room_id":?,
    "desk_id":?,
    "player_id":?
}

#triggered by the challenger.
"readyGo response":
{
    {
        "id":SINGLECAST_READYGO
    }
    or
    {
        "id":RES_READYGO_FAILED,
        "reason":"inner server error"
    }
}

#event of "giveup" in SmartGo Pro.
"giveup request":
{
    "id":REQ_GIVEUP,
    "room_id":?,
    "desk_id":?,
    "player_id":?,
    #calculates the result in the client and sends result to the server.
    "username":"?",
    "title":"?",
    "level":?,
    "integral":?,
    "winning_probability":?
}

"giveup response":
{
    {
        "id":RES_GIVEUP_SUCCESS
    }
    or
    {
        "id":RES_GIVEUP_FAILED,
        "reason":"inner server error"
    }
}

#event of "placechess"(where the chess be placed) in SmartGo Pro.
"placechess request":
{
    "id":REQ_PLACECHESS,
    "room_id":?,
    "desk_id":?,
    "x":int(1-18),
    "y":int(1-18)
}

"placechess response":
{
    #to whom requests "placechess"
    #when receives the response,switches the timer.
    {
        "id":RES_PLACECHESS_SUCCESS
    }
    #to rival
    #when the rival receive the response,switches the timer.
    {
        "id":SINGLECAST_PLACECHESS,
        "x":?,
        "y":?
    }
    or
    {
        "id":RES_PLACECHESS_FAILED,
        "reason":"inner server error"
    }
}

#event of "gameover".
"gameover request":
{
    "id":REQ_GAMEOVER_WINNER/REQ_GAMEOVER_LOSER,
    "room_id":?,
    "desk_id":?,
    "player_id":?,
    #calculates the result in the client and sends result to the server.
    "username":"?",
    "title":"?",
    "level":?,
    "integral":?,
    "winning_probability":?
}

"gameover response":
{
    {
        #transfer information sent by winner/loser to loser/winner
        "id":RES_GAMEOVER,
        "username":"?",
        "title":"?",
        "level":?,
        "integral":?,
        "winning_probability":?
    }
    or
    {
        "id":RES_GAMEOVER_FAILED,
        "reason":"inner server error"
    }
}

#event of "send" in SmartGo Pro.
"send request":
{
    "id":REQ_SEND_MSG,
    "room_id":?,
    "desk_id":?,
    "player_id":?,
    "msg":"chars"
}

"send response":
{
    {
        "id":RES_SEND_MSG_SUCCESS
    }
    or
    {
        "id":RES_SEND_MSG_FAILED,
        "reason":"inner server error"
    }
}
